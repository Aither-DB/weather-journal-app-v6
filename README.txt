
                  ██████                
                ██      ██              
              ██          ████          
            ██              ▒▒██        
        ████▒▒                ██        
  ██████      ▒▒            ▒▒▒▒████    
██▒▒            ▒▒        ▒▒      ▒▒██  
██▒▒▒▒        ▒▒▒▒▒▒▒▒▒▒▒▒          ▒▒██
  ██▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██
    ████████▓▓████████████████████████  

░█░░▒█▒██▀▒▄▀▄░▀█▀░█▄█▒██▀▒█▀▄░░░░▒█░▄▀▄░█▒█▒█▀▄░█▄░█▒▄▀▄░█▒░░░▒▄▀▄▒█▀▄▒█▀▄
░▀▄▀▄▀░█▄▄░█▀█░▒█▒▒█▒█░█▄▄░█▀▄▒░░▀▄█░▀▄▀░▀▄█░█▀▄░█▒▀█░█▀█▒█▄▄▒░░█▀█░█▀▒░█▀▒

* FRONT END WEB DEVELOPMENT NANODEGREE | WEATHER JOURNAL APP *
* AUTHOR: DANIEL BRASHER *

** TABLE OF CONTENTS **

1. Project description
2. Planning
3. Sources

** 1. PROJECT DESCRIPTION **

This is a weather journal app that allows you to input a zipcode and a note about how you are feeling. The app then saves both weather details for the zip code you entered and your comments to a database. It will then display it as entry at the bottom of the page.

** 2. PLANNING **

// Step 1 - Setup server, package.json, database and site files

Initialize the server using Node.js Express.

We will install lightweight JavaScript database NeDB (https://github.com/louischatriot/nedb). This will allow us to store values in a database.db file.

We will set up a 'public' folder which will contain all HTML, CSS and JavaScript client side code.

Will also set up a packages.json file to keep track of metadata about the project such as the project name, version, dependencies and other information.

Install CORS and Body-Parser middleware for security reasons and to parse requests.

// Step 2 - Setup API requests from OpenWeatherMap and store API key securely

Sign up to the OpenWeatherMap API and get a copy of the key. Save that key as a environment variable, install npm dotenv and save the key in a .env file.

We will use the 'Current Weather Data API' to extract the temperature and city name.

// Step 3 - Prepare HTML and CSS

Setup a page with the header 'Weather Journal App'. Have an input field for an Australian zip code and for a text area field for journal notes. Have a 'Submit' button. Finally, have a <div> element at the bottom which displays entries.

There will be an event listener set up on the 'Submit' button which will then take the zip code and use the 'Geocoding API' to extract coordinates. We will then use those coordinates to get the weather_description and main_temp JSON data using the 'Current Weather Data API'.

We will then use a template literal to generate the following message which will then be dynamically printed to the page in the 'Entries' <div> element. The message will be laid out as follows:

    `${date} <br><br>
    ${comment}. The temperature is ${temp}°C in ${city}.`

An example of this would be:

    `26th March 2023, 09:47:00 PM AEDT

    The weather is partly cloudy and I feel okay. The temperature is 15.67°C in Adelaide.

Finally 

// Step 4 - Push files to GitHub, deploy on Glitch and submit assignment

Push the files to GitHub, link to Glitch account and then upload files to Glitch. When deployed submit the assignment through Udacity.

** 3. SOURCES **

The ASCII Text Art at the top of this page was generated by Cloud Text Art (https://textart.sh/topic/cloud) and Text Editor (https://texteditor.com/ascii-art/).

To develop this application I have used the The Weather Here by Joey Lee for the ITP course Quant Humanists as a reference: https://github.com/joeyklee/the-weather-here.

I have also used Daniel Shiffman's 'Working with Data and APIs in JavaScript' tutorial to help guide me: https://www.youtube.com/playlist?list=PLRqwX-V7Uu6YxDKpFzf_2D84p0cyk4T7X.

Have used Dave Kwiatkowski's animated 'The ASCII Galaxy' to make cloud animation at top of page: https://codepen.io/davekwiatkowski/pen/LyvXWK.